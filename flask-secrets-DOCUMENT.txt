
"""
ACTIVATE requirements.txt :https://docs.google.com/document/d/e/2PACX-1vRIW_TuZ6z0ASjAoxgJgmzjGYLCDx019tKvphaTwK_Za7fnMKywUuXI0-s5wr0nQI_gprm6J6y7L9rL/pub

pip3 install -r requirements.txt
*****************


 ______________________________
 After install Flask that is working with this version those modules must be installed as well :
 pip install Werkzeug==2.0.0
After that it is likely that you will also have an AttributeError related to the jinja package, so if you have it, run:

pip install jinja2==3.0.3
Share
Follow
 _________________________
     IMPORTANT: EVERY TIME TO CHECK WITH WHICH VERSION OF  THE LIBRARIES IS DONE THE EXERCISES. BECAUSE SOME
     NEW VERSION NOT NECESSARILY HAVE THE SAME ATTRIBUTES.....
 ___________________________
 """

"""______________________________________________________________"""

"""BASE.HTML :
  IMPORT NOTE: THOSE {%BLOCK NAME%} WILL ACTIVATE THE HTML TAG THAT IT IS INITIATE .
  
  is to make use of Jinja. with base.html as template. in success.html an denied.html both files
use Template Inheritance (from base.html): {% extends "base.html" %} ,{% block title %}Denied{% endblock %},
{% block content %},{% endblock %}
--------------
Super Blocks
 ***Jinja2â€™s super() function. This gives you the option of amending blocks instead of replacing them. *****
When we inherit from Python classes, you often see super.init()
When we are inheriting templates. Sometimes, there's some part of the template that we want to keep,
but we also want to add to it. So we can use super blocks in this case.
IN BASE.HTML
<style>
{% block styling %} (STYLING IS JUST A REFERENCE CAN BE ANY NAME AS LONG IN THE  ACROSS ALL THE TEMPLATE ARE THE SAME
NAME)
body{
    background: purple;
}
{% endblock %}
</style>

____________
BOOTSTRAP IN FLASK
 1. Install Flask-Bootstrap to your project using pip:

pip install Flask-Bootstrap

**********Flask-Bootstrap documentation :  https://pythonhosted.org/Flask-Bootstrap/basic-usage.html ***************

$$$$ CREATING FORM WITH BOOTSTRAP $$$$$$$
 
 One of the main reasons why we're using Flask-Bootstrap in this project is because it has one of the most 
 convenient methods for generating forms with WTForms.

Literally, in 1 line of code, you can create your form. It's as simple as:

{{ wtf.quick_form(form) }}

What this line of code will do is generate all the labels, inputs, buttons, styling for your form just by
 taking the WTForm object that was passed to the template (form).

You can simply delete the entire

element and add a line to inherit the wtf support from bootstrap and use the quick_form() to generate your form.
IN " LOGIN.HTML "
{% extends "bootstrap/base.html" %}
{% import "bootstrap/wtf.html" as wtf %}

{{ wtf.quick_form(form, action='login', method="post",novalidate=True) }}

LOOK AT " LOGIN.HTML " FOR FURTHER EXPLANATION ( https://pythonhosted.org/Flask-Bootstrap/forms.html )


"""


